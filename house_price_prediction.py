# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IbTWUCob8m1nVdN1I8u9_Ho86ZtbidyF
"""

from IPython import get_ipython
from IPython.display import display
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
from sklearn.datasets import fetch_california_housing

house_price_dataset = fetch_california_housing()

data = house_price_dataset.data
target = house_price_dataset.target

print(house_price_dataset)

house_price_dataframe = pd.DataFrame(house_price_dataset.data)

#First 5 rows of DataFrame
house_price_dataframe.head()

#Add the target(price) column to the DataFrame
house_price_dataframe['Price'] = house_price_dataset.target

house_price_dataframe.shape

#check for missing values
house_price_dataframe.isnull().sum()

#statistical measures
house_price_dataframe.describe()

"""Correlation between various features"""

#Positive Correlation and Negative Correlation
correlation = house_price_dataframe.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Reds')

"""Splitting the data and Target"""

house_price_dataframe['price'] = house_price_dataset.target

X = house_price_dataframe.drop(['price'], axis=1)
Y = house_price_dataframe['price']

print(X)
print(Y)

"""Splitting the data into Training data and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size  = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

XGBoost Regressor
"""

model = XGBRegressor()

!pip install --upgrade xgboost==1.7.5 scikit-learn==1.3.0

model.fit(X_train, Y_train)

"""Evaluation

Prediction on training data
"""

#accuracy for prediction on training data
training_data_prediction = model.predict(X_train)

print(training_data_prediction)

#R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)

#Mean Absolute ERROR
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

print('R squared error: ', score_1)
print('Mean Bsolute Error: ', score_2)

"""Visualizing the actual Prices and predicted Prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Price vs Predicted Price')
plt.show()

"""Prediction on Test data"""

test_data_prediction = model.predict(X_test)

#R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)

#Mean Absolute ERROR
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print('R squared error: ', score_1)
print('Mean Bsolute Error: ', score_2)